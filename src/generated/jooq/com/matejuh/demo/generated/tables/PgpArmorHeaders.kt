/*
 * This file is generated by jOOQ.
 */
package com.matejuh.demo.generated.tables


import com.matejuh.demo.generated.Public

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgpArmorHeaders(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function()
) {
    companion object {

        /**
         * The reference instance of <code>public.pgp_armor_headers</code>
         */
        val PGP_ARMOR_HEADERS: PgpArmorHeaders = PgpArmorHeaders()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>public.pgp_armor_headers.key</code>.
     */
    val KEY: TableField<Record, String?> = createField(DSL.name("key"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.pgp_armor_headers.value</code>.
     */
    val VALUE: TableField<Record, String?> = createField(DSL.name("value"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, arrayOf(
        DSL.value(null, SQLDataType.CLOB)
    ))
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.pgp_armor_headers</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.pgp_armor_headers</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.pgp_armor_headers</code> table reference
     */
    constructor(): this(DSL.name("pgp_armor_headers"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): PgpArmorHeaders = PgpArmorHeaders(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): PgpArmorHeaders = PgpArmorHeaders(alias, this, parameters)
    override fun `as`(alias: Table<*>): PgpArmorHeaders = PgpArmorHeaders(alias.getQualifiedName(), this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgpArmorHeaders = PgpArmorHeaders(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgpArmorHeaders = PgpArmorHeaders(name, null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgpArmorHeaders = PgpArmorHeaders(name.getQualifiedName(), null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(
          __1: String?
    ): PgpArmorHeaders = PgpArmorHeaders(DSL.name("pgp_armor_headers"), null, arrayOf(
        DSL.value(__1, SQLDataType.CLOB)
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          __1: Field<String?>
    ): PgpArmorHeaders = PgpArmorHeaders(DSL.name("pgp_armor_headers"), null, arrayOf(
        __1
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
